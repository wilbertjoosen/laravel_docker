import { __extends } from 'tslib';
import { ErrorStateMatcher } from '@angular/material/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { FocusMonitor, A11yModule } from '@angular/cdk/a11y';
import { CommonModule } from '@angular/common';
import { MatFormFieldControl, MatInputBase, mixinErrorState, MatFormFieldModule, MatInputModule } from '@angular/material';
import { Component, ElementRef, HostBinding, Input, Optional, Self, ViewEncapsulation, NgModule } from '@angular/core';
import { FormControl, FormGroupDirective, NgControl, NgForm, ReactiveFormsModule } from '@angular/forms';
import { NgxWigModule } from 'ngx-wig';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:typedef
/** @type {?} */
var _MatInputMixinBase = mixinErrorState(MatInputBase);
var MatNgxWigComponent = /** @class */ (function (_super) {
    __extends(MatNgxWigComponent, _super);
    function MatNgxWigComponent(ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, _focusMonitor, _elRef) {
        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
        _this.ngControl = ngControl;
        _this._focusMonitor = _focusMonitor;
        _this._elRef = _elRef;
        _this._uid = "lms-mat-ngx-wig-" + MatNgxWigComponent.nextId++;
        _this.describedBy = '';
        _this.focused = false;
        _this._required = false;
        _this._disabled = false;
        _this.shouldPlaceholderFloat = false;
        _this.shouldLabelFloat = false;
        _this.controlType = 'mat-ngx-wig';
        _this._destroy$$ = new Subject();
        _this.editorControl = new FormControl();
        _this._onChange = function () { };
        _this._onTouched = function () { };
        if (ngControl !== null) {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(MatNgxWigComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._id = value || this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatNgxWigComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.editorControl.value;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this.writeValue(newValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatNgxWigComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        set: /**
         * @param {?} newPlaceholder
         * @return {?}
         */
        function (newPlaceholder) {
            this._placeholder = newPlaceholder;
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatNgxWigComponent.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.editorControl.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatNgxWigComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        set: /**
         * @param {?} isRequired
         * @return {?}
         */
        function (isRequired) {
            this._required = coerceBooleanProperty(isRequired);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatNgxWigComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.setDisabledState(isDisabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatNgxWigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._focusMonitor.monitor(this._elRef.nativeElement, true)
            .subscribe(function (origin) {
            _this.focused = !!origin;
            if (!_this.focused) {
                _this._onTouched();
            }
            _this.stateChanges.next();
        });
        this.editorControl.valueChanges
            .pipe(distinctUntilChanged(), filter(function () { return _this.editorControl.enabled; }), takeUntil(this._destroy$$))
            .subscribe(function (newValue) {
            _this._onChange(newValue);
        });
    };
    /**
     * @return {?}
     */
    MatNgxWigComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.ngControl) {
            this.updateErrorState();
        }
    };
    /**
     * @return {?}
     */
    MatNgxWigComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stateChanges.next();
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    MatNgxWigComponent.prototype.setDescribedByIds = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this.describedBy = ids.join(' ');
    };
    /**
     * @param {?} _event
     * @return {?}
     */
    MatNgxWigComponent.prototype.onContainerClick = /**
     * @param {?} _event
     * @return {?}
     */
    function (_event) { };
    /**
     * @param {?} newValue
     * @return {?}
     */
    MatNgxWigComponent.prototype.writeValue = /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        this.editorControl.setValue(newValue, { emitEvent: false });
        this.stateChanges.next();
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MatNgxWigComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this._disabled = coerceBooleanProperty(isDisabled);
        if (this._disabled) {
            this.editorControl.disable();
        }
        else {
            this.editorControl.enable();
        }
        this.stateChanges.next();
    };
    /**
     * @return {?}
     */
    MatNgxWigComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy$$.next();
        this._destroy$$.complete();
        this.stateChanges.complete();
        this._focusMonitor.stopMonitoring(this._elRef.nativeElement);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MatNgxWigComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MatNgxWigComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    MatNgxWigComponent.nextId = 0;
    MatNgxWigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-ngx-wig',
                    template: "<ngx-wig [formControl]=\"editorControl\"\n         [placeholder]=\"placeholder\">\n</ngx-wig>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: MatFormFieldControl,
                            useExisting: MatNgxWigComponent
                        }
                    ],
                    host: {
                        '[attr.id]': 'id',
                        class: 'component-wrapper'
                    },
                    styles: [".mat-form-field-type-mat-ngx-wig .mat-form-field-wrapper{padding:0!important}.mat-form-field-type-mat-ngx-wig .mat-form-field-infix{padding:0}.mat-form-field-type-mat-ngx-wig .mat-form-field-label-wrapper{display:none}.mat-form-field-type-mat-ngx-wig .mat-error{padding:8px 24px 24px;word-break:break-all}.mat-form-field-type-mat-ngx-wig .mat-hint{flex:1}.mat-form-field-type-mat-ngx-wig.mat-form-field{display:block!important;width:100%;line-height:inherit!important}.mat-form-field-type-mat-ngx-wig .mat-form-field-flex{display:flex!important;align-items:center!important;width:auto!important;line-height:24px;font-size:16px}.mat-form-field-type-mat-ngx-wig .mat-form-field-infix{border-top:none;width:100%!important}.mat-form-field-type-mat-ngx-wig .mat-form-field-infix:not(:first-child){margin-left:6px}.mat-form-field-type-mat-ngx-wig .mat-form-field-underline{position:relative!important;bottom:auto;margin-top:-1px}.mat-form-field-type-mat-ngx-wig .mat-form-field-underline .mat-form-field-ripple{top:-1px!important}.mat-form-field-type-mat-ngx-wig .mat-form-field-subscript-wrapper{position:static!important;font-size:12px;line-height:18px;margin-top:0}.mat-form-field-type-mat-ngx-wig .mat-form-field-hint-spacer{display:none}.mat-form-field-type-mat-ngx-wig.mat-form-field-disabled{cursor:not-allowed!important}", ".component-wrapper{display:block;width:100%}", ".nw-editor__res ol,.nw-editor__res ul{list-style-position:outside;margin-left:18px;padding:6px 0}.nw-editor__res ul{list-style-type:disc}.nw-editor__res ol{list-style-type:decimal}.nw-editor__res b,.nw-editor__res strong{font-weight:600}.nw-editor__res em,.nw-editor__res i{font-style:italic}.nw-editor__res a{color:#40a3de;text-decoration:underline}.nw-editor__res a:hover{text-decoration:none}.nw-toolbar{padding:0 21px!important;background:0 0!important;border-left:none!important;border-right:none!important;border-top:1px solid rgba(11,48,64,.2)!important;border-bottom:1px solid rgba(11,48,64,.2)!important;border-radius:0!important;color:#0b3040!important}.nw-toolbar__item{padding:3px;border-right:0!important}.nw-button{border:none!important;display:flex!important;align-items:center;justify-content:center;width:36px!important;height:36px!important;border-radius:2px!important;color:inherit;transition:opacity .2s}.nw-button:focus{background-color:rgba(11,48,64,.1)!important}.nw-button:active{background-color:rgba(11,48,64,.15)!important}.nw-button:before{font-size:22px!important}.nw-button--active{background-color:rgba(11,48,64,.1)!important}.nw-editor-container{border:none!important;border-radius:0!important}.nw-editor__src{padding:16px 24px!important}.nw-editor{display:block!important;padding:0!important;height:auto!important}.nw-editor__res{display:block!important;padding:16px 24px!important;font-size:16px;line-height:24px;height:400px!important;overflow:auto}.nw-editor__placeholder{padding:16px 24px!important}"]
                }] }
    ];
    /** @nocollapse */
    MatNgxWigComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: ErrorStateMatcher },
        { type: FocusMonitor },
        { type: ElementRef }
    ]; };
    MatNgxWigComponent.propDecorators = {
        id: [{ type: Input }],
        describedBy: [{ type: HostBinding, args: ['attr.aria-describedby',] }],
        placeholder: [{ type: Input }],
        required: [{ type: Input }],
        disabled: [{ type: Input }]
    };
    return MatNgxWigComponent;
}(_MatInputMixinBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatNgxWigModule = /** @class */ (function () {
    function MatNgxWigModule() {
    }
    MatNgxWigModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        A11yModule,
                        CommonModule,
                        MatFormFieldModule,
                        MatInputModule,
                        NgxWigModule,
                        ReactiveFormsModule,
                    ],
                    declarations: [MatNgxWigComponent],
                    exports: [MatNgxWigComponent]
                },] }
    ];
    return MatNgxWigModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MatNgxWigComponent, MatNgxWigModule, _MatInputMixinBase as ɵa };

//# sourceMappingURL=mat-ngx-wig.js.map